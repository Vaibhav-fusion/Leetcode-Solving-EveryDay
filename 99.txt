# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def recoverTree(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """

        arr=[]

        def dfs(root):
            if root is not  None:
                dfs(root.left)
                arr.append(root.val)
                dfs(root.right)

        dfs(root)
        arr.sort()
        index=[0]
        def fix(root):
            if root is not  None:
                fix(root.left)
                root.val=arr[index[0]]
                index[0]+=1
                fix(root.right)

        fix(root)
        return root

        
