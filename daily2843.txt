2843. Count Symmetric Integers
Easy
Topics
Companies
Hint
You are given two positive integers low and high.

An integer x consisting of 2 * n digits is symmetric if the sum of the first n digits of x is equal to the sum of the last n digits of x. Numbers with an odd number of digits are never symmetric.

Return the number of symmetric integers in the range [low, high].

 

Example 1:

Input: low = 1, high = 100
Output: 9
Explanation: There are 9 symmetric integers between 1 and 100: 11, 22, 33, 44, 55, 66, 77, 88, and 99.
Example 2:

Input: low = 1200, high = 1230
Output: 4
Explanation: There are 4 symmetric integers between 1200 and 1230: 1203, 1212, 1221, and 1230.
 

Constraints:

1 <= low <= high <= 104
Seen this question in a real interview before?
1/5
Yes
No
Accepted
137.3K
Submissions
167.2K
Acceptance Rate
82.1%
Topics
Math
Enumeration


////////soltuion 


class Solution:
    def countSymmetricIntegers(self, low: int, high: int) -> int:

        res=0
    
        for i in range(low,min(high+1,100)):
            if i%11==0 and i!=0:
                res+=1

        # print(res)

        def helper(index,x):

            if index==4:
                chut=int(x)
                if int(x[0])+int(x[1])==int(x[2])+int(x[3]) and len(str(int(x)))==4 and low<=chut<=high:
                    
                    return 1
                else:
                    return 0
            a=0
            for i in range(10):
                a+=helper(index+1,x+str(i))

            return a 

        return (helper(0,""))+res
        
