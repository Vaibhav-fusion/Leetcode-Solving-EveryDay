
3272. Find the Count of Good Integers
Solved
Hard
Topics
Companies
Hint
You are given two positive integers n and k.

An integer x is called k-palindromic if:

x is a palindrome.
x is divisible by k.
An integer is called good if its digits can be rearranged to form a k-palindromic integer. For example, for k = 2, 2020 can be rearranged to form the k-palindromic integer 2002, whereas 1010 cannot be rearranged to form a k-palindromic integer.

Return the count of good integers containing n digits.

Note that any integer must not have leading zeros, neither before nor after rearrangement. For example, 1010 cannot be rearranged to form 101.

 

Example 1:

Input: n = 3, k = 5

Output: 27

Explanation:

Some of the good integers are:

551 because it can be rearranged to form 515.
525 because it is already k-palindromic.
Example 2:

Input: n = 1, k = 4

Output: 2

Explanation:

The two good integers are 4 and 8.

Example 3:

Input: n = 5, k = 6

Output: 2468

 

Constraints:

1 <= n <= 10
1 <= k <= 9

///////solution 

class Solution:
    def countGoodIntegers(self, n: int, k: int) -> int:

        import math

        def myCode(n,i,curr,k,l):
            if i == 0:
                signature = tuple(sorted(curr))
                if signature not in l:
                    if int(curr) % k == 0:
                        l[signature] = True
                        return [curr]
                return []

            a = []

            if i%2==1:
                for j in range(10):
                    a+=myCode(n,i-1,str(j),k,l)
            elif i==2:
                for j in range(1,10):
                    a+=myCode(n,i-2,str(j)+curr+str(j),k,l)
            else:
                for j in range(10):
                    a+=myCode(n,i-2,str(j)+curr+str(j),k,l)

            return a

        ans = 0

        lst = myCode(n,n,"",k,{})

        for i in lst:
            x = len(i)
            d = {}
            for j in range(x):
                if i[j] in d:
                    d[i[j]] += 1
                else:
                    d[i[j]] = 1

            total_valid = 0

            for digit in d:
                if digit == "0":
                    continue
                d[digit] -= 1 
                
                ways = math.factorial(x - 1)
                for freq in d.values():
                    ways //= math.factorial(freq)
                
                total_valid += ways
                d[digit] += 1

            ans+=total_valid
        return(ans)